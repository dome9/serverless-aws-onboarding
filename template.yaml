AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: Serverless application for onboarding AWS account to Dome9

Metadata:
  AWS::ServerlessRepo::Application:
    Name: dome9-automatic-onboarding
    Description: Automatic onboarding flow triggered by account creation via ControlTower
    Author: SRE team
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ['Dome9', 'automation', 'checkpoint']
    HomePageUrl: https://github.com/dome9/serverless-aws-onboarding
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/dome9/serverless-aws-onboarding

Parameters:
  NotificationEmail:
    Type: String
  Dome9AccessId:
    Type: String
    Default: "ACCESS_ID"
  Dome9SecretKey:
    Type: String
    Default: "SECRET_KEY"

#Mappings:
#  S3perRegion:
#    us-east-1:
#      NAME: marketplace-sa-resources-ct-us-east-1
#    us-east-2:
#      NAME: marketplace-sa-resources-ct-us-east-2
#    us-west-2:
#      NAME: marketplace-sa-resources-ct-us-west-2
#    eu-west-1:
#      NAME: marketplace-sa-resources-ct-eu-west-1
#    ap-southeast-2:
#      NAME: marketplace-sa-resources-ct-ap-southeast-2
Resources:
  Dome9AutomationLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      CodeUri: .
#      Code:
#        S3Bucket: !FindInMap [ S3perRegion, !Ref "AWS::Region", NAME ]
#        S3Key: ct_batchcreation_lambda.zip
      Description: A starter AWS Lambda function.
      MemorySize: 128
      Timeout: 300
      Role: !GetAtt Dome9AutomationLambdaRole.Arn
      Events:
        CWLifecycleEvent:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              detail-type:
                - AWS Service Event via CloudTrail
              source:
                - aws.controltower
              detail:
                eventName:
                  - CreateManagedAccount
      Tags:
        'Name': "CreateManagedAccountDome9Automation"
      Environment:
        Variables:
          PRINCIPAL_ARN: !GetAtt Dome9AutomationLambdaRole.Arn
          DOME9_ACCESS_ID: !Ref Dome9AccessId
          DOME9_SECRET_KEY: !Ref Dome9SecretKey

#  CaptureControlTowerLifeCycleEvents:
#    Type: 'AWS::Events::Rule'
#    Properties:
#      Description: Capture Control Tower LifeCycle Events and Trigger an Action
#      EventPattern:
#        detail:
#          eventName:
#            - CreateManagedAccount
#          eventSource:
#            - controltower.amazonaws.com
#        detail-type:
#          - AWS Service Event via CloudTrail
#        source:
#          - aws.controltower
#      State: ENABLED
#      Targets:
#        - Arn: !GetAtt CreateManagedAccountLambda.Arn
#          Id: IDCaptureControlTowerLifeCycleEvents
#    Metadata:
#      'AWS::CloudFormation::Designer':
#        id: a24b1fa7-d094-4467-ac96-4671257de26e
  Dome9AutomationLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition: {}
      Path: /
      Policies:
        - PolicyName: ct-admin-inline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sso:GetProfile'
                  - 'sso:CreateProfile'
                  - 'sso:UpdateProfile'
                  - 'sso:AssociateProfile'
                  - 'sso:CreateApplicationInstance'
                  - 'sso:GetSSOStatus'
                  - 'sso:GetTrust'
                  - 'sso:CreateTrust'
                  - 'sso:UpdateTrust'
                  - 'sso:GetPeregrineStatus'
                  - 'sso:GetApplicationInstance'
                  - 'sso:ListDirectoryAssociations'
                  - 'sso:ListPermissionSets'
                  - 'sso:GetPermissionSet'
                  - 'sso:ProvisionApplicationInstanceForAWSAccount'
                  - 'sso:ProvisionApplicationProfileForAWSAccountInstance'
                  - 'sso:ProvisionSAMLProvider'
                  - 'sso:ListProfileAssociations'
                  - 'sso-directory:ListMembersInGroup'
                  - 'sso-directory:SearchGroups'
                  - 'sso-directory:SearchGroupsWithGroupName'
                  - 'sso-directory:SearchUsers'
                  - 'sso-directory:CreateUser'
                  - 'sso-directory:DescribeGroups'
                  - 'sso-directory:DescribeDirectory'
                  - 'sso-directory:GetUserPoolInfo'
                  - 'controltower:CreateManagedAccount'
                  - 'controltower:DescribeManagedAccount'
                  - 'controltower:DeregisterManagedAccount'
                  - 's3:GetObject'
                  - 'organizations:describeOrganization'
                  - 'sso:DescribeRegisteredRegions'
                  - 'servicecatalog:DisassociatePrincipalFromPortfolio'
                  - 'servicecatalog:AssociatePrincipalWithPortfolio'
                Resource: '*'
        - PolicyName: PassRoleOnAWSControlTowerStackSetRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/service-role/AWSControlTowerStackSetRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
        - 'arn:aws:iam::aws:policy/AWSOrganizationsFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchEventsFullAccess'
        - 'arn:aws:iam::aws:policy/AWSServiceCatalogAdminReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/AWSServiceCatalogEndUserFullAccess'
        - 'arn:aws:iam::aws:policy/AWSCloudFormationFullAccess'

  Dome9AutomationLambdaAlarmTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail
  CreateManagedAccountDome9AutomationLambdaAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
        - !Ref Dome9AutomationLambdaAlarmTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref Dome9AutomationLambda
      EvaluationPeriods: 1
      MetricName: Errors
      TreatMissingData: "notBreaching"
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: '1'

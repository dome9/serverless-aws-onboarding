AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: Serverless application for onboarding AWS account to CloudGuard

Metadata:
  AWS::ServerlessRepo::Application:
    Name: cloudguard-automatic-onboarding
    Description: Automatic onboarding flow triggered by account creation via ControlTower
    Author: SRE team
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ['CloudGuard', 'automation', 'checkpoint', 'serverless', 'onboarding']
    HomePageUrl: https://github.com/dome9/serverless-aws-onboarding
    SemanticVersion: 1.0.1
    SourceCodeUrl: https://github.com/dome9/serverless-aws-onboarding

Parameters:
  NotificationEmail:
    Type: String
  Dome9AccessId:
    Type: String
    Default: "ACCESS_ID"
    NoEcho: true
  Dome9SecretKey:
    Type: String
    Default: "SECRET_KEY"
    NoEcho: true
  Dome9Region:
    Type: String
    Default: "us-east-1"
    AllowedValues:
      - us-east-1
      - eu-west-1
      - ap-southeast-1
      - ap-southeast-2
      - ap-south-1
    Description: Enter a Deom9 region to register. allowed values are us-east-1, eu-west-1, ap-southeast-1, ap-southeast-2 or ap-south-1. Default is us-east-1.

Resources:
  Dome9AutomationLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      CodeUri: .
      Description: A starter AWS Lambda function.
      MemorySize: 128
      Timeout: 300
      Role: !GetAtt Dome9AutomationLambdaRole.Arn
      Events:
        CWLifecycleEvent:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              detail-type:
                - AWS Service Event via CloudTrail
              source:
                - aws.controltower
              detail:
                eventName:
                  - CreateManagedAccount
      Tags:
        'Name': "CreateManagedAccountDome9Automation"
      Environment:
        Variables:
          DOME9_REGION: !Ref Dome9Region

  Dome9ApiKeys:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: String
      Name: Dome9ApiKeys
      SecretString:
        !Sub '{"AccessId":"${Dome9AccessId}","Secret":"${Dome9SecretKey}"}'

  Dome9AutomationLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition: {}
      Path: /
      Policies:
        - PolicyName: Dome9OnboardingLambdaCloudformationAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action: cloudformation:CreateStackInstances
                Resource: arn:aws:cloudformation:*:*:stackset/Dome9AutomaticOnboardingStackSetV2:*
              - Sid: VisualEditor1
                Effect: Allow
                Action: cloudformation:CreateStackSet
                Resource: "*"
              - Sid: VisualEditor2
                Effect: Allow
                Action: cloudformation:DeleteStackInstances
                Resource: arn:aws:cloudformation:*:*:stackset/Dome9AutomaticOnboardingStackSetV2:*
              - Sid: VisualEditor3
                Effect: Allow
                Action: cloudformation:DescribeStackSetOperation
                Resource: arn:aws:cloudformation:*:*:stackset/Dome9AutomaticOnboardingStackSetV2:*
        - PolicyName: PermitPassRoleOnAWSControlTowerStackSetRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action: iam:PassRole
                Resource: arn:aws:iam::*:role/service-role/AWSControlTowerStackSetRole
        - PolicyName: GetDome9ApiSecretPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: arn:aws:secretsmanager:*:*:secret:Dome9ApiKeys-*
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  Dome9AutomationLambdaAlarmTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail
  CreateManagedAccountDome9AutomationLambdaAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
        - !Ref Dome9AutomationLambdaAlarmTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref Dome9AutomationLambda
      EvaluationPeriods: 1
      MetricName: Errors
      TreatMissingData: "notBreaching"
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: '1'
